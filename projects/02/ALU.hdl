// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // if zx == 1: x = 0
    And16(a=x,b[0]=false,out=x0);
    Mux16(a=x,b=x0,sel=zx,out=x1);
    // if nx == 1: x = !x
    Not16(in=x1,out=x2);
    Mux16(a=x1,b=x2,sel=nx,out=xg);
    // if zy == 1: y = 0
    And16(a=y,b[0]=false,out=y0);
    Mux16(a=y,b=y0,sel=zy,out=y1);
    // if ny == 1: y = !y
    Not16(in=y1,out=y2);
    Mux16(a=y1,b=y2,sel=ny,out=yg);
    // if f == 1: x + y else: x & y
    Add16(a=xg,b=yg,out=add);
    And16(a=xg,b=yg,out=and);
    Mux16(a=and,b=add,sel=f,out=out1);
    Not16(in=out1,out=out2);
    // if no == 1: out = !out
    Mux16(a=out1,b=out2,sel=no,out=out);
    Mux16(a=out1,b=out2,sel=no,out[15]=msb,out[0..7]=low,out[8..15]=high);
    // if out == 0: zr = 1
    Or8Way(in=low,out=low1);
    Or8Way(in=high,out=high1);
    Or(a=low1,b=high1,out=zr1);
    Not(in=zr1,out=zr);
    // if out < 0: ng = 1
    Mux(a=false,b=true,sel=msb,out=ng);
}
